{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION, SEMRESATTRS_PROCESS_RUNTIME_NAME, SEMRESATTRS_PROCESS_RUNTIME_VERSION } from '@opentelemetry/semantic-conventions';\nimport { diag } from '@opentelemetry/api';\nimport { Resource } from '../Resource';\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nvar BrowserDetectorSync = /** @class */function () {\n  function BrowserDetectorSync() {}\n  BrowserDetectorSync.prototype.detect = function (config) {\n    var _a;\n    var _b, _c, _d;\n    var isBrowser = typeof navigator !== 'undefined' && ((_c = (_b = global.process) === null || _b === void 0 ? void 0 : _b.versions) === null || _c === void 0 ? void 0 : _c.node) === undefined &&\n    // Node.js v21 adds `navigator`\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore don't have Bun types\n    ((_d = global.Bun) === null || _d === void 0 ? void 0 : _d.version) === undefined; // Bun (bun.sh) defines `navigator`\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    var browserResource = (_a = {}, _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'browser', _a[SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION] = 'Web Browser', _a[SEMRESATTRS_PROCESS_RUNTIME_VERSION] = navigator.userAgent, _a);\n    return this._getResourceAttributes(browserResource, config);\n  };\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  BrowserDetectorSync.prototype._getResourceAttributes = function (browserResource, _config) {\n    if (browserResource[SEMRESATTRS_PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug('BrowserDetector failed: Unable to find required browser resources. ');\n      return Resource.empty();\n    } else {\n      return new Resource(__assign({}, browserResource));\n    }\n  };\n  return BrowserDetectorSync;\n}();\nexport var browserDetectorSync = new BrowserDetectorSync();","map":{"version":3,"names":["SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION","SEMRESATTRS_PROCESS_RUNTIME_NAME","SEMRESATTRS_PROCESS_RUNTIME_VERSION","diag","Resource","BrowserDetectorSync","prototype","detect","config","isBrowser","navigator","_c","_b","global","process","versions","node","undefined","_d","Bun","version","empty","browserResource","_a","userAgent","_getResourceAttributes","_config","debug","__assign","browserDetectorSync"],"sources":["/home/trioangle/opentelemetry/develop/opentelemetry-demo-app/frontend/node_modules/@opentelemetry/resources/src/detectors/BrowserDetectorSync.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { Resource } from '../Resource';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser =\n      typeof navigator !== 'undefined' &&\n      global.process?.versions?.node === undefined && // Node.js v21 adds `navigator`\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore don't have Bun types\n      global.Bun?.version === undefined; // Bun (bun.sh) defines `navigator`\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SEMRESATTRS_PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (browserResource[SEMRESATTRS_PROCESS_RUNTIME_VERSION] === '') {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SACEA,uCAAuC,EACvCC,gCAAgC,EAChCC,mCAAmC,QAC9B,qCAAqC;AAE5C,SAASC,IAAI,QAAQ,oBAAoB;AAGzC,SAASC,QAAQ,QAAQ,aAAa;AAEtC;;;AAGA,IAAAC,mBAAA;EAAA,SAAAA,oBAAA,GAwCA;EAvCEA,mBAAA,CAAAC,SAAA,CAAAC,MAAM,GAAN,UAAOC,MAAgC;;;IACrC,IAAMC,SAAS,GACb,OAAOC,SAAS,KAAK,WAAW,IAChC,EAAAC,EAAA,IAAAC,EAAA,GAAAC,MAAM,CAACC,OAAO,cAAAF,EAAA,uBAAAA,EAAA,CAAEG,QAAQ,cAAAJ,EAAA,uBAAAA,EAAA,CAAEK,IAAI,MAAKC,SAAS;IAAI;IAChD;IACA;IACA,EAAAC,EAAA,GAAAL,MAAM,CAACM,GAAG,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,OAAO,MAAKH,SAAS,CAAC,CAAC;IACrC,IAAI,CAACR,SAAS,EAAE;MACd,OAAOL,QAAQ,CAACiB,KAAK,EAAE;;IAEzB,IAAMC,eAAe,IAAAC,EAAA,OACnBA,EAAA,CAACtB,gCAAgC,IAAG,SAAS,EAC7CsB,EAAA,CAACvB,uCAAuC,IAAG,aAAa,EACxDuB,EAAA,CAACrB,mCAAmC,IAAGQ,SAAS,CAACc,SAAS,E,GAC3D;IACD,OAAO,IAAI,CAACC,sBAAsB,CAACH,eAAe,EAAEd,MAAM,CAAC;EAC7D,CAAC;EACD;;;;;;;EAOQH,mBAAA,CAAAC,SAAA,CAAAmB,sBAAsB,GAA9B,UACEH,eAAmC,EACnCI,OAAiC;IAEjC,IAAIJ,eAAe,CAACpB,mCAAmC,CAAC,KAAK,EAAE,EAAE;MAC/DC,IAAI,CAACwB,KAAK,CACR,qEAAqE,CACtE;MACD,OAAOvB,QAAQ,CAACiB,KAAK,EAAE;KACxB,MAAM;MACL,OAAO,IAAIjB,QAAQ,CAAAwB,QAAA,KACdN,eAAe,EAClB;;EAEN,CAAC;EACH,OAAAjB,mBAAC;AAAD,CAAC,CAxCD;AA0CA,OAAO,IAAMwB,mBAAmB,GAAG,IAAIxB,mBAAmB,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}