{"ast":null,"code":"import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { ConsoleSpanExporter, SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\n\n// Enable diagnostic logging\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.ALL);\n\n// Create a tracer provider\nconst provider = new WebTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'frontend-service'\n  })\n});\n\n// Optional: Also log traces to the console\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n\n// Register the provider\nprovider.register();\nexport const tracer = provider.getTracer('frontend-tracer');","map":{"version":3,"names":["WebTracerProvider","ConsoleSpanExporter","SimpleSpanProcessor","Resource","SemanticResourceAttributes","diag","DiagConsoleLogger","DiagLogLevel","setLogger","ALL","provider","resource","SERVICE_NAME","addSpanProcessor","register","tracer","getTracer"],"sources":["/home/trioangle/opentelemetry/develop/opentelemetry-demo-app/frontend/src/tracing.js"],"sourcesContent":["import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { ConsoleSpanExporter, SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\n\n// Enable diagnostic logging\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.ALL);\n\n// Create a tracer provider\nconst provider = new WebTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'frontend-service',\n  }),\n});\n\n// Optional: Also log traces to the console\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\n\n// Register the provider\nprovider.register();\n\nexport const tracer = provider.getTracer('frontend-tracer');\n\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,mBAAmB,EAAEC,mBAAmB,QAAQ,+BAA+B;AACxF,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,0BAA0B,QAAQ,qCAAqC;AAChF,SAASC,IAAI,EAAEC,iBAAiB,EAAEC,YAAY,QAAQ,oBAAoB;;AAE1E;AACAF,IAAI,CAACG,SAAS,CAAC,IAAIF,iBAAiB,CAAC,CAAC,EAAEC,YAAY,CAACE,GAAG,CAAC;;AAEzD;AACA,MAAMC,QAAQ,GAAG,IAAIV,iBAAiB,CAAC;EACrCW,QAAQ,EAAE,IAAIR,QAAQ,CAAC;IACrB,CAACC,0BAA0B,CAACQ,YAAY,GAAG;EAC7C,CAAC;AACH,CAAC,CAAC;;AAEF;AACAF,QAAQ,CAACG,gBAAgB,CAAC,IAAIX,mBAAmB,CAAC,IAAID,mBAAmB,CAAC,CAAC,CAAC,CAAC;;AAE7E;AACAS,QAAQ,CAACI,QAAQ,CAAC,CAAC;AAEnB,OAAO,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,CAAC,iBAAiB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}